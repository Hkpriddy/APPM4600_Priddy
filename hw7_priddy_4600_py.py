# -*- coding: utf-8 -*-
"""HW7_Priddy_4600.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q6GQzJmZNiBnyumnk90UZVS7k5vXQ8Sy
"""

import numpy as np
import matplotlib.pyplot as plt
import math
from numpy.linalg import inv

def driver():

    f = lambda x: 1/(1+(10*x)**2)
    N = 19
    xi = []
    yi = []
    h = 2/(N - 1)
    for i in range(N):
      #xi.append(-1+(i)*h)
      xi.append(np.cos((2*i*np.pi)/(2*N)))
      yi.append(f(xi[i]))

    xi = np.array(xi)
    yi = np.array(yi)
    print("xi = ", xi)
    newx = np.linspace(-1,1,1000)
    #newy, c = MonoSolver(xi, f, newx, N)
    newy = barycentric_GRUNGE(f, xi, newx, N)

    plt.plot(newx, f(newx))
    plt.plot(newx, newy)
    plt.plot(xi,yi,'o')
    plt.legend(['f(x)', 'p(x)'])

def vandy(x,N):
  V = np.zeros((N,N))
  for i in range(len(x)):
    V[:,i] = x**i
  return V

def MonoSolver(x, f, newx, N):
  V = vandy(x,N)
  y = f(x)
  a = np.linalg.solve(V,y)
  newy = np.linspace(0,1,len(newx))
  for i in range(len(newx)):
    temp = 0
    for j in range(len(x)):
      temp +=  a[j]*newx[i]**j
    newy[i] = temp
  return newy, a

def barycentric_GRUNGE(f,x,newx,N):
  y = f(x)
  p = np.linspace(1,1,len(newx))
  phi = np.linspace(1,1,len(newx))
  for i in range(len(newx)):
    for j in range(N):
      phi[i] = phi[i]*(newx[i] - x[j])

  omega = np.linspace(1,1,len(x))
  for i in range(len(x)):
    for j in range(len(x)):
      if j != i:
        omega[i] = omega[i] * 1/(x[i] - x[j])
  for i in range(len(newx)):
    bigsum = 0
    for j in range(len(x)):
      bigsum += omega[j]/(newx[i] - x[j])*f(x[j])
    p[i] = phi[i]*bigsum

  return(p)
driver()